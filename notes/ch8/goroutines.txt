Go routines
-a go routine is a  function executing concurrently with other goroutines in the same address space
  - it is non blocking
  - it is lightweight (cost to allocate a stack space)
  - in multi-cpu OS, are multiplexed into multiple OS threads so that
    if one thread is blocking, other threads continue to run
  - any function can be called as a goroutine with the construct

       go yourfunction()

  - go routines are managed by the Go runtime

-go routines take a simple function

    func boring() {
       ...
    }

    func main() {
       // launch a go routine
       go boring ()
    }

-go routines have its own call stack which shrinks and grows as required
-is cheap
-is practical to have 100,000s goroutines
-is not a thread but can think of it like a thread
-goroutines get multiplex dynamically onto threads as needed


Channels
-when doing goroutines or anything concurrency you want to be able to
 communicate between the concurrent/parallel
-this is done using channels in go

 channels are declared and initialized just like variables

 they first need to be allocated with make:

 var c chan int
 c = make(chan int)
 // or
 c := make(chan int)

-send information to a channel
 c <- 1

-receive information from a channel
 x := <- c

-sends and receives block until the other end is ready, allowing
 you to use them without locks or condition variable

-channels can be buffered by specifying the size

   // waits for 40 ints
   c := make (chan int, 40)


Range + Closing Channels
-a channel can be closed by the sender using the close method

  close (c)

-you can for loop on a channel until it closes using the range construct on a channel
  the value returned will be the content of the channel

  for i:=range c {
     fmt.Println(i)
  }

-you can test a channel to see if it is closed

 i, ok := <- c


-channels can be passed into a function and returned from a func

  func setChannel(c chan int) {

  }

   // returns a receive only channel
  func getChannel () <- ch string {

  }

-select statement lets a go routine wait on multiple communication
 operations
  - will block until one of its cases can run, then it will
    execute that case
  - syntax is like switch statement with case + default

  for {
     select {
     case c <- x:
     case <- quit:
     default:
        time.Sleep(50*time.Millisecond)
     }
  }